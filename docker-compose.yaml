version: "3"
services:
  antifraud-app:
    build: ./app/
    image: antifraud-app:v1.0.0
    env_file:
      - ./app/.env
    volumes:
      - ./app:/app
    depends_on:
      - db
      - antifraud-worker
    networks:
      - antifraud-network
  web:
    build: ./nginx
    ports:
      - 80:80
      - 443:443
    depends_on:
      - antifraud-app
      - db
    networks:
      - antifraud-network

  antifraud-worker:
    #build: ./ml_worker/
    build:
      context: ./ml_worker/
      dockerfile: Dockerfile
    platform: linux/amd64
    image: antifraud-worker:v1.0.0
    env_file:
      - ./ml_worker/.env
    #container_name: antifraud-worker
    scale: 3
    restart: unless-stopped

    volumes:
      - ./ml_worker:/app
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - antifraud-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # Порт для приложений (AMQP)
      - "15672:15672" # Веб-интерфейс (Management)
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    #command: >
    #  sh -c "rabbitmq-plugins enable rabbitmq_management && rabbitmq-server"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - antifraud-network
  
  db:
    image: postgres:16-alpine
    volumes:
      - ./postgres_data:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    #expose:
    #  - 5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=sa
    networks:
      - antifraud-network


networks:
  antifraud-network:
    name: antifraud-network
    driver: bridge
